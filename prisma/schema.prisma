generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  passwordHash String
  role         Role     @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  categoriesCreated Category[] @relation("CategoryCreatedBy")
  categoriesUpdated Category[] @relation("CategoryUpdatedBy")

  articlesCreated Article[] @relation("ArticleCreatedBy")
  articlesUpdated Article[] @relation("ArticleUpdatedBy")

  employeesCreated Employee[] @relation("EmployeeCreatedBy")
  employeesUpdated Employee[] @relation("EmployeeUpdatedBy")

  officeProfilesCreated OfficeProfile[] @relation("OfficeProfileCreatedBy")
  officeProfilesUpdated OfficeProfile[] @relation("OfficeProfileUpdatedBy")

  faqsCreated Faq[] @relation("FaqCreatedBy")
  faqsUpdated Faq[] @relation("FaqUpdatedBy")

  jumbotronsCreated Jumbotron[] @relation("JumbotronCreatedBy")
  jumbotronsUpdated Jumbotron[] @relation("JumbotronUpdatedBy")

  videosCreated Video[] @relation("VideoCreatedBy")
  videosUpdated Video[] @relation("VideoUpdatedBy")

  teamsCreated Team[] @relation("TeamCreatedBy")
  teamsUpdated Team[] @relation("TeamUpdatedBy")

  bannersCreated Banner[] @relation("BannerCreatedBy")
  bannersUpdated Banner[] @relation("BannerUpdatedBy")

  linksCreated Link[] @relation("LinkCreatedBy")
  linksUpdated Link[] @relation("LinkUpdatedBy")
}

model Category {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]

  createdById String @default("cmfjg9pz60000yxeecpdrl1k1")
  updatedById String @default("cmfjg9pz60000yxeecpdrl1k1")
  createdBy   User   @relation("CategoryCreatedBy", fields: [createdById], references: [id])
  updatedBy   User   @relation("CategoryUpdatedBy", fields: [updatedById], references: [id])

  @@index([createdById])
  @@index([updatedById])
}

model Article {
  id            String    @id @default(cuid())
  title         String
  slug          String    @unique
  content       String
  excerpt       String?
  coverImageUrl String?
  published     Boolean   @default(false)
  categoryId    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  category      Category? @relation(fields: [categoryId], references: [id])

  createdById String @default("cmfjg9pz60000yxeecpdrl1k1")
  updatedById String @default("cmfjg9pz60000yxeecpdrl1k1")
  createdBy   User   @relation("ArticleCreatedBy", fields: [createdById], references: [id])
  updatedBy   User   @relation("ArticleUpdatedBy", fields: [updatedById], references: [id])

  @@index([createdById])
  @@index([updatedById])
}

model Employee {
  id        String   @id @default(cuid())
  name      String
  position  String
  photoUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdById String @default("cmfjg9pz60000yxeecpdrl1k1")
  updatedById String @default("cmfjg9pz60000yxeecpdrl1k1")
  createdBy   User   @relation("EmployeeCreatedBy", fields: [createdById], references: [id])
  updatedBy   User   @relation("EmployeeUpdatedBy", fields: [updatedById], references: [id])

  @@index([createdById])
  @@index([updatedById])
}

model OfficeProfile {
  id          Int      @id @default(1)
  name        String
  address     String?
  email       String?
  phone       String?
  social      Json?
  logoUrl     String?
  description String?
  updatedAt   DateTime @default(now()) @updatedAt

  createdById String @default("cmfjg9pz60000yxeecpdrl1k1")
  updatedById String @default("cmfjg9pz60000yxeecpdrl1k1")
  createdBy   User   @relation("OfficeProfileCreatedBy", fields: [createdById], references: [id])
  updatedBy   User   @relation("OfficeProfileUpdatedBy", fields: [updatedById], references: [id])

  @@index([createdById])
  @@index([updatedById])
}

model Faq {
  id        String   @id @default(cuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdById String @default("cmfjg9pz60000yxeecpdrl1k1")
  updatedById String @default("cmfjg9pz60000yxeecpdrl1k1")
  createdBy   User   @relation("FaqCreatedBy", fields: [createdById], references: [id])
  updatedBy   User   @relation("FaqUpdatedBy", fields: [updatedById], references: [id])

  @@index([createdById])
  @@index([updatedById])
}

model Jumbotron {
  id        Int      @id @default(1)
  title     String?
  subtitle  String?
  imageUrl  String?
  updatedAt DateTime @default(now()) @updatedAt

  createdById String @default("cmfjg9pz60000yxeecpdrl1k1")
  updatedById String @default("cmfjg9pz60000yxeecpdrl1k1")
  createdBy   User   @relation("JumbotronCreatedBy", fields: [createdById], references: [id])
  updatedBy   User   @relation("JumbotronUpdatedBy", fields: [updatedById], references: [id])

  @@index([createdById])
  @@index([updatedById])
}

model Video {
  id           String   @id @default(cuid())
  title        String
  url          String
  thumbnailUrl String?
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  createdById String @default("cmfjg9pz60000yxeecpdrl1k1")
  updatedById String @default("cmfjg9pz60000yxeecpdrl1k1")
  createdBy   User   @relation("VideoCreatedBy", fields: [createdById], references: [id])
  updatedBy   User   @relation("VideoUpdatedBy", fields: [updatedById], references: [id])

  @@index([createdById])
  @@index([updatedById])
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdById String @default("cmfjg9pz60000yxeecpdrl1k1")
  updatedById String @default("cmfjg9pz60000yxeecpdrl1k1")
  createdBy   User   @relation("TeamCreatedBy", fields: [createdById], references: [id])
  updatedBy   User   @relation("TeamUpdatedBy", fields: [updatedById], references: [id])

  @@index([createdById])
  @@index([updatedById])
}

model Banner {
  id          String   @id @default(cuid())
  title       String
  description String?
  linkUrl     String?
  imageUrl    String
  width       Int
  height      Int
  order       Int      @default(0)
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdById String @default("cmfjg9pz60000yxeecpdrl1k1")
  updatedById String @default("cmfjg9pz60000yxeecpdrl1k1")
  createdBy   User   @relation("BannerCreatedBy", fields: [createdById], references: [id])
  updatedBy   User   @relation("BannerUpdatedBy", fields: [updatedById], references: [id])

  @@index([published, order, createdAt])
  @@index([createdById])
  @@index([updatedById])
}

model Link {
  id          String    @id @default(cuid())
  label       String
  url         String
  newTab      Boolean   @default(true)
  order       Int       @default(0)
  iconKind    IconKind?
  iconName    String?
  iconSvg     String?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  createdById String @default("cmfjg9pz60000yxeecpdrl1k1")
  updatedById String @default("cmfjg9pz60000yxeecpdrl1k1")
  createdBy   User   @relation("LinkCreatedBy", fields: [createdById], references: [id])
  updatedBy   User   @relation("LinkUpdatedBy", fields: [updatedById], references: [id])

  @@index([order])
  @@index([createdById])
  @@index([updatedById])
}

enum Role {
  ADMIN
  EDITOR
  USER
}

enum IconKind {
  LUCIDE
  SVG
}
